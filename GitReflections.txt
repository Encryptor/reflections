--) git command line commands

git log --stat // shows git log and gives statistics about which files have changed in each commit
	       // green '+' indicated addition and red '-' indicates deletion. The number of +'s and -'s
	       // are proportional to the changes

git diff id#1 id#2 // to diff between 2 ids

git --version // to check git version installed

git clone URL // to clone a repository

git config --global color.ui auto // to show diffs in color

--) Repositories are part of Git and commits are part of repository

--) Clone takes an existing repository and creates a new one just like it

--) Log shows the commits in the repository prior to the current commit

--) a commit is a snapshot of a Git repository

--) git checkout means resetting all files to how they were at the time the commit was made

--) HEAD is git's terminology for the current commit

--) git status // shows which files have chaning since the last commit

--) git has a staging area to which I can add files one at a time. then when ready to 		commit, Git adds the entire contents of the staging area and makes one commit

--) git add filename // to add files to the staging area, ready to be committed

--) git commit -m "Commit message" // make a commit and add a message to it

--) git diff // compares working directory to the staging area

--) git diff --staged // compares staging area to commit1 (which is the most recent commit)

--) git checkout master // checks out master branch

--) master is the name given to the main branch. and every time I create a repository, Git 	creates a master branch for me.

--) I can label(name) each branch (other than the master). Preferrable the name is 		descriptive


--) detached head error message means I'm looking at a commit that is not labeled with a 		branch name (So in this state I'm either on a master branch on in a detached head 		branch)

--) tip of a branch refers to the most recent commit 

--) It is possible to check out a branch, similar to a commit

--) merging is the process of combining 2 commits

--) git branch // shows current branches

--) git checkout branch_name // to checkout a branch. makes this branch the current checked 	out branch

--) a common workflow for people working together on a project is to make a new branch for 
	each feature or bug fix. then when the new bug is fixed the user can either
	update the master to point to the tip of the new branch or if changes have also
	been made to master then both changes can be merged.

--) git log --graph --oneline branch_name branch_name // to visualize branch structure. I
	can add 1 or n branch_names

--) git checkout -b new_branch_name // shortcut to create a branch and checkout it out at 	the same time

--) git log -n 1 // git will only show 1 number of commit. 1 can be any number

--) Branches are really just labels that refer to commits

--) git remote // to view all the remotes

--) git remote add origin 'URL' // to add the repo on GitHub, origin is a standard for new 	repos (add 
https:// vs ssh if you don't have ssh set up on your system)

--) Forking // allows to make a copy of someone else's repository, right on GitHub servers
	without pulling the repo down to your local machine. (This allows to give credit to
	the original creator). You can fork a repo and have it appear under my own account
	with just a single click on GitHub. Then to make modifications, you can likely pull
	down the code on to your machine (unless files are simple and modifications can be
	made on GitHub).
	Forking is a lot like cloning. In fact a Fork is just a Clone that GitHub makes for 	you on their machines. Forks all link back to the original. It also makes it easier
	to suggest changes back to the original repo.

--) When you Clone a repo, Git automatically set up a remote pointing to the repo you 
	Cloned from. (check with git remote -v)

--) 

































